use crate::metadata::ir::*;
pub(crate) static REGISTERS: IR = IR {
    blocks: &[Block {
        name: "Synt",
        extends: None,
        description: Some("SYNT."),
        items: &[
            BlockItem {
                name: "gcr",
                description: Some("Global control register."),
                array: None,
                byte_offset: 0x0,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Gcr"),
                }),
            },
            BlockItem {
                name: "rld",
                description: Some("Counter reload register."),
                array: None,
                byte_offset: 0x4,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Rld"),
                }),
            },
            BlockItem {
                name: "timestamp_new",
                description: Some("timestamp new value register."),
                array: None,
                byte_offset: 0x8,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("TimestampNew"),
                }),
            },
            BlockItem {
                name: "cnt",
                description: Some("Counter."),
                array: None,
                byte_offset: 0xc,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Cnt"),
                }),
            },
            BlockItem {
                name: "timestamp_sav",
                description: Some("timestamp trig save value."),
                array: None,
                byte_offset: 0x10,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("TimestampSav"),
                }),
            },
            BlockItem {
                name: "timestamp_cur",
                description: Some("timestamp read value."),
                array: None,
                byte_offset: 0x14,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("TimestampCur"),
                }),
            },
            BlockItem {
                name: "cmp",
                description: Some("no description available."),
                array: Some(Array::Regular(RegularArray { len: 4, stride: 4 })),
                byte_offset: 0x20,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Cmp"),
                }),
            },
        ],
    }],
    fieldsets: &[
        FieldSet {
            name: "Cmp",
            extends: None,
            description: Some("no description available."),
            bit_size: 32,
            fields: &[Field {
                name: "cmp",
                description: Some(
                    "comparator value, the output will assert when counter count to this value.",
                ),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Cnt",
            extends: None,
            description: Some("Counter."),
            bit_size: 32,
            fields: &[Field {
                name: "cnt",
                description: Some("counter."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Gcr",
            extends: None,
            description: Some("Global control register."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "cen",
                    description: Some("1- Enable counter."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "crst",
                    description: Some("1- Reset counter."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "counter_debug_en",
                    description: Some("set to enable cpu_debug_mode to stop the counter."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "timestamp_enable",
                    description: Some("set to enable the timesamp , clr to stop."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "timestamp_debug_en",
                    description: Some("set to enable cpu_debug_mode to stop the timesamp."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 5 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "timestamp_reset",
                    description: Some("reset timesamp to 0, auto clr."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 28 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "timestamp_set_new",
                    description: Some("set the timesamp to new value, auto clr."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 29 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "timestamp_dec_new",
                    description: Some("set to decrease the timesamp with new value, auto clr."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 30 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "timestamp_inc_new",
                    description: Some("set to increase the timesamp with new value, auto clr."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 31 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Rld",
            extends: None,
            description: Some("Counter reload register."),
            bit_size: 32,
            fields: &[Field {
                name: "rld",
                description: Some("counter reload value."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "TimestampCur",
            extends: None,
            description: Some("timestamp read value."),
            bit_size: 32,
            fields: &[Field {
                name: "value",
                description: Some("current timesamp value."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "TimestampNew",
            extends: None,
            description: Some("timestamp new value register."),
            bit_size: 32,
            fields: &[Field {
                name: "value",
                description: Some("new value for timesamp , can be used as set/inc/dec."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "TimestampSav",
            extends: None,
            description: Some("timestamp trig save value."),
            bit_size: 32,
            fields: &[Field {
                name: "value",
                description: Some("use the trigger to save timesamp here."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
    ],
    enums: &[],
};
