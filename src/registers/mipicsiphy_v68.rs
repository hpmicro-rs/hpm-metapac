use crate::metadata::ir::*;
pub(crate) static REGISTERS: IR = IR {
    blocks: &[Block {
        name: "MipiCsiPhy",
        extends: None,
        description: Some("MIPI_CSI_PHY0."),
        items: &[
            BlockItem {
                name: "soft_rst",
                description: Some("soft reset control."),
                array: None,
                byte_offset: 0x0,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("SoftRst"),
                }),
            },
            BlockItem {
                name: "phy_rcal",
                description: Some("dphy resistor calibration."),
                array: None,
                byte_offset: 0x4,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("PhyRcal"),
                }),
            },
            BlockItem {
                name: "ulp_rx_en",
                description: Some("enable lprx and ulprx."),
                array: None,
                byte_offset: 0x8,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("UlpRxEn"),
                }),
            },
            BlockItem {
                name: "voffcal_out",
                description: Some("hs-rx dc-offset auto-calibration results."),
                array: None,
                byte_offset: 0xc,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("VoffcalOut"),
                }),
            },
            BlockItem {
                name: "csi_ctl01",
                description: Some("dphy hardcore control."),
                array: None,
                byte_offset: 0x10,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("CsiCtl01"),
                }),
            },
            BlockItem {
                name: "csi_ctl23",
                description: Some("dphy hardcore control."),
                array: None,
                byte_offset: 0x14,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("CsiCtl23"),
                }),
            },
            BlockItem {
                name: "csi_vinit",
                description: Some("ulp lp-rx input threshold voltage trimming for data lane."),
                array: None,
                byte_offset: 0x1c,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("CsiVinit"),
                }),
            },
            BlockItem {
                name: "clane_para",
                description: Some("clock lane parameter."),
                array: None,
                byte_offset: 0x20,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("ClanePara"),
                }),
            },
            BlockItem {
                name: "t_hs_termen",
                description: Some("t-termen of all datalane."),
                array: None,
                byte_offset: 0x24,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("THsTermen"),
                }),
            },
            BlockItem {
                name: "t_hs_settle",
                description: Some("t-settle of all data lanes."),
                array: None,
                byte_offset: 0x28,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("THsSettle"),
                }),
            },
            BlockItem {
                name: "t_clane_init",
                description: Some("t-init of clock lane."),
                array: None,
                byte_offset: 0x30,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("TClaneInit"),
                }),
            },
            BlockItem {
                name: "t_lane_init0",
                description: Some("t-init of data lane0."),
                array: None,
                byte_offset: 0x34,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("TLaneInit0"),
                }),
            },
            BlockItem {
                name: "t_lane_init1",
                description: Some("t-init of data lane1."),
                array: None,
                byte_offset: 0x38,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("TLaneInit1"),
                }),
            },
            BlockItem {
                name: "tlpx_ctrl",
                description: Some("the time of tlpx_ctrl of all lane."),
                array: None,
                byte_offset: 0x44,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("TlpxCtrl"),
                }),
            },
            BlockItem {
                name: "ne_swap",
                description: Some("lane swap and dp/dn swap select."),
                array: None,
                byte_offset: 0x48,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("NeSwap"),
                }),
            },
            BlockItem {
                name: "misc_info",
                description: Some("misc info of dphyrx_pcs control."),
                array: None,
                byte_offset: 0x4c,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("MiscInfo"),
                }),
            },
            BlockItem {
                name: "bist_test0",
                description: Some("bist test control."),
                array: None,
                byte_offset: 0x70,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("BistTest0"),
                }),
            },
            BlockItem {
                name: "bist_test1",
                description: Some("bist test control."),
                array: None,
                byte_offset: 0x74,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("BistTest1"),
                }),
            },
            BlockItem {
                name: "bist_test2",
                description: Some("bist test control."),
                array: None,
                byte_offset: 0x78,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("BistTest2"),
                }),
            },
            BlockItem {
                name: "bist_test3",
                description: Some("bist test control."),
                array: None,
                byte_offset: 0x7c,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("BistTest3"),
                }),
            },
            BlockItem {
                name: "burn_in_test0",
                description: Some("burn-in test control."),
                array: None,
                byte_offset: 0xa0,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("BurnInTest0"),
                }),
            },
            BlockItem {
                name: "burn_in_test1",
                description: Some("burn-in test control."),
                array: None,
                byte_offset: 0xa4,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("BurnInTest1"),
                }),
            },
            BlockItem {
                name: "burn_in_test2",
                description: Some("bist test control."),
                array: None,
                byte_offset: 0xa8,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("BurnInTest2"),
                }),
            },
            BlockItem {
                name: "burn_in_test4",
                description: Some("bist test control."),
                array: None,
                byte_offset: 0xb0,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("BurnInTest4"),
                }),
            },
            BlockItem {
                name: "burn_in_test5",
                description: Some("burn-in test control."),
                array: None,
                byte_offset: 0xb4,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("BurnInTest5"),
                }),
            },
            BlockItem {
                name: "burn_in_test6",
                description: Some("burn-in test control."),
                array: None,
                byte_offset: 0xb8,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("BurnInTest6"),
                }),
            },
            BlockItem {
                name: "burn_in_test9",
                description: Some("burn-in test control."),
                array: None,
                byte_offset: 0xc4,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("BurnInTest9"),
                }),
            },
            BlockItem {
                name: "debug_info",
                description: Some("debug data control."),
                array: None,
                byte_offset: 0xd0,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("DebugInfo"),
                }),
            },
            BlockItem {
                name: "debug_cfg_reg0",
                description: Some("the hardcore interface control in debug mode."),
                array: None,
                byte_offset: 0xd4,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("DebugCfgReg0"),
                }),
            },
            BlockItem {
                name: "debug_cfg_reg1",
                description: Some("the hardcore interface control in debug mode."),
                array: None,
                byte_offset: 0xd8,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("DebugCfgReg1"),
                }),
            },
            BlockItem {
                name: "debug_cfg_reg2",
                description: Some("the hardcore interface control in debug mode."),
                array: None,
                byte_offset: 0xd12,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("DebugCfgReg2"),
                }),
            },
            BlockItem {
                name: "debug_cfg_reg3",
                description: Some("the hardcore interface control in debug mode."),
                array: None,
                byte_offset: 0xd16,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("DebugCfgReg3"),
                }),
            },
            BlockItem {
                name: "debug_cfg_reg4",
                description: Some("the hardcore interface control in debug mode."),
                array: None,
                byte_offset: 0xd20,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("DebugCfgReg4"),
                }),
            },
            BlockItem {
                name: "debug_cfg_reg5",
                description: Some("the hardcore interface control in debug mode."),
                array: None,
                byte_offset: 0xd24,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("DebugCfgReg5"),
                }),
            },
        ],
    }],
    fieldsets: &[
        FieldSet {
            name: "BistTest0",
            extends: None,
            description: Some("bist test control."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "bist_en_soft",
                    description: Some("enable prbs bist test."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "bist_en_sel",
                    description: Some("the source of bist_en sel."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "bist_ok_lane0",
                    description: Some("bist_ok of lane0."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "bist_ok_lane1",
                    description: Some("bist_ok of lane1."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 3 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "bist_done_lan0",
                    description: Some("bist_done of lane0."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 6 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "bist_done_lan1",
                    description: Some("bist_done of lane1."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 7 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "BistTest1",
            extends: None,
            description: Some("bist test control."),
            bit_size: 32,
            fields: &[Field {
                name: "prbs_check_num",
                description: Some("the byte num of prbs bist check num."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "BistTest2",
            extends: None,
            description: Some("bist test control."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "prbs_err_threshold",
                    description: Some("the threshold of prbs bist error."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 16,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "prbs_seed",
                    description: Some("the seed of prbs7."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 16 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "BistTest3",
            extends: None,
            description: Some("bist test control."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "prbs_err_num_lan0",
                    description: Some("the byte num of mismatch data of data lane0 in bist mode."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 16,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "prbs_err_num_lan1",
                    description: Some("the byte num of mismatch data of data lane1 in bist mode."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 16 }),
                    bit_size: 16,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "BurnInTest0",
            extends: None,
            description: Some("burn-in test control."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "burn_in_en_soft",
                    description: Some("enable prbs burn_in test."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "burn_in_en_sel",
                    description: Some("the source of prbs burn_in_en sel."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "burn_in_ok_lan0",
                    description: Some("burn_in_ok of lane0."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "burn_in_ok_lan1",
                    description: Some("burn_in_ok of lane1."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 3 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "burn_in_ok_clan",
                    description: Some("burn_in_ok of clock lane."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 6 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "BurnInTest1",
            extends: None,
            description: Some("burn-in test control."),
            bit_size: 32,
            fields: &[Field {
                name: "burn_in_seed",
                description: Some("the seed of prbs7 for brun-in test."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 8,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "BurnInTest2",
            extends: None,
            description: Some("bist test control."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "burn_in_err_num_lan0",
                    description: Some("the bit num of mismatch data on data lan0 in burn-in mode."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 16,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "burn_in_err_num_lan1",
                    description: Some("the bit num of mismatch data on data lan1 in burn-in mode."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 16 }),
                    bit_size: 16,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "BurnInTest4",
            extends: None,
            description: Some("bist test control."),
            bit_size: 32,
            fields: &[Field {
                name: "burn_in_err_num_clan",
                description: Some("the bit num of mismatch data on clock lane in burn-in mode."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 16,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "BurnInTest5",
            extends: None,
            description: Some("burn-in test control."),
            bit_size: 32,
            fields: &[Field {
                name: "burn_in_check_num_lan0",
                description: Some("the checked bit num of lane0."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "BurnInTest6",
            extends: None,
            description: Some("burn-in test control."),
            bit_size: 32,
            fields: &[Field {
                name: "burn_in_checked_num_lan1",
                description: Some("the checked bit num of lane1."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "BurnInTest9",
            extends: None,
            description: Some("burn-in test control."),
            bit_size: 32,
            fields: &[Field {
                name: "burn_in_check_num_clan",
                description: Some("the checked bit num of clock lane."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "ClanePara",
            extends: None,
            description: Some("clock lane parameter."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "t_clk_settle",
                    description: Some("the value of tclk-settle of clklane."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "t_clk_termen",
                    description: Some(
                        "time for the clock lane receiver to enable the HS line termination.",
                    ),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "CsiCtl01",
            extends: None,
            description: Some("dphy hardcore control."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "csi_ctl0_0",
                    description: Some(
                        "force data lane-n and clock lane hs-rx to be normal operation.",
                    ),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl0_1",
                    description: Some(
                        "force data lane-n and clock lane lp/ulprx to be normal operation.",
                    ),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl0_2",
                    description: Some("ulprx_lpen."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl0_3",
                    description: Some("hs_rx_voffcal_trim_polar."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 3 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl0_4",
                    description: Some("bypass hs_rx_voffcal_en."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl0_5",
                    description: Some("ulprx_vref_trim."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 5 }),
                    bit_size: 2,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl0_6",
                    description: Some("clock lane hs-rx dc-offset trimming control."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 5,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl0_7",
                    description: Some("clock lane hs-rx dc-offset auto-calibration enable."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 13 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl1_0",
                    description: Some(
                        "force data lane-n and clock lane hs-rx to be normal operation.",
                    ),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 16 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl1_1",
                    description: Some(
                        "force data lane-n and clock lane lp/ulprx to be normal operation.",
                    ),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 17 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl1_2",
                    description: Some("ulprx_lpen."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 18 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl1_3",
                    description: Some("hs_rx_voffcal_trim_polar."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 19 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl1_4",
                    description: Some("bypass hs_rx_voffcal_en."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 20 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl1_5",
                    description: Some("ulprx_vref_trim."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 21 }),
                    bit_size: 2,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl1_6",
                    description: Some("clock lane hs-rx dc-offset trimming control."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 24 }),
                    bit_size: 5,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl1_7",
                    description: Some("clock lane hs-rx dc-offset auto-calibration enable."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 29 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "CsiCtl23",
            extends: None,
            description: Some("dphy hardcore control."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "csi_ctl3_0",
                    description: Some("data lane-0 hs-rx skew adjust with binary code."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 16 }),
                    bit_size: 4,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl3_1",
                    description: Some("data lane-0 skew trimming enable."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 20 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl3_2",
                    description: Some("data lane-1 hs-rx skew adjust with binary code."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 24 }),
                    bit_size: 4,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_ctl3_3",
                    description: Some("data lane-1 skew trimming enable."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 28 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "CsiVinit",
            extends: None,
            description: Some("ulp lp-rx input threshold voltage trimming for data lane."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "csi_0_lprx_vinit",
                    description: Some("pt ft indicator in csi lane-0."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 4,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_1_lprx_vinit",
                    description: Some("pt ft indicator in csi lane-1."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 4 }),
                    bit_size: 4,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_clk_lprx_vint",
                    description: Some("pt ft indicator in csi clk lane."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 16 }),
                    bit_size: 4,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_lprx_vref_trim",
                    description: Some("pt ft indicator in csi clk data lane."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 20 }),
                    bit_size: 4,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "DebugCfgReg0",
            extends: None,
            description: Some("the hardcore interface control in debug mode."),
            bit_size: 32,
            fields: &[Field {
                name: "debug_cfg_reg0",
                description: Some("debug config register0."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "DebugCfgReg1",
            extends: None,
            description: Some("the hardcore interface control in debug mode."),
            bit_size: 32,
            fields: &[Field {
                name: "debug_cfg_reg1",
                description: Some("debug config register1."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "DebugCfgReg2",
            extends: None,
            description: Some("the hardcore interface control in debug mode."),
            bit_size: 32,
            fields: &[Field {
                name: "debug_cfg_reg2",
                description: Some("debug config register2."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "DebugCfgReg3",
            extends: None,
            description: Some("the hardcore interface control in debug mode."),
            bit_size: 32,
            fields: &[Field {
                name: "debug_cfg_reg3",
                description: Some("debug config register3."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "DebugCfgReg4",
            extends: None,
            description: Some("the hardcore interface control in debug mode."),
            bit_size: 32,
            fields: &[Field {
                name: "debug_cfg_reg4",
                description: Some("debug config register4."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "DebugCfgReg5",
            extends: None,
            description: Some("the hardcore interface control in debug mode."),
            bit_size: 32,
            fields: &[Field {
                name: "debug_cfg_reg5",
                description: Some("debug config register5."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 32,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "DebugInfo",
            extends: None,
            description: Some("debug data control."),
            bit_size: 32,
            fields: &[Field {
                name: "debug_mode_sel",
                description: Some("the debug bus sel."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 16 }),
                bit_size: 6,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "MiscInfo",
            extends: None,
            description: Some("misc info of dphyrx_pcs control."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "long_sotsync_en",
                    description: Some(
                        "at least six zero is checked before sot swquence \"00011101\".",
                    ),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "ulps_lp10_sel",
                    description: Some("the lp10 select signal in ulps_exit state."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "NeSwap",
            extends: None,
            description: Some("lane swap and dp/dn swap select."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "lane_swap_lane0",
                    description: Some("data lane0 swap."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 2,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "lane_swap_lan1",
                    description: Some("data lane1 swap."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 2,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "dpdn_swap_lan0",
                    description: Some("datalane0 dpdn swap."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "dpdn_swap_lane1",
                    description: Some("datalane1 dpdn swap."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 9 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "PhyRcal",
            extends: None,
            description: Some("dphy resistor calibration."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "rcal_en",
                    description: Some("enable hs-rx terminal trimming."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rcal_trim",
                    description: Some("default value of HS-RX terminal configure."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 4,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rcal_ctl",
                    description: Some("rcal function control."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 5 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rcal_out",
                    description: Some("hs-rx terminal trimming results."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 13 }),
                    bit_size: 4,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rcal_done",
                    description: Some("hs-rx terminal trimming done indicator signal."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 17 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "SoftRst",
            extends: None,
            description: Some("soft reset control."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "cfg_clk_soft_rst",
                    description: Some("the soft reset of clk_cfg domain."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "hs_clk_soft_rst",
                    description: Some("the soft reset of clk_hs domain."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "TClaneInit",
            extends: None,
            description: Some("t-init of clock lane."),
            bit_size: 32,
            fields: &[Field {
                name: "t_clk_init",
                description: Some("initialization time of lock lane."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 24,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "THsSettle",
            extends: None,
            description: Some("t-settle of all data lanes."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "t_d0_settle",
                    description: Some("the value of ths-settle of data lane0."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "t_d1_settle",
                    description: Some("the value of ths-settle of data lane1."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "THsTermen",
            extends: None,
            description: Some("t-termen of all datalane."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "t_d0_termen",
                    description: Some("the value of ths-termen of datalane0."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "t_d1_termen",
                    description: Some("the value of ths-termen of datalane1."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "TLaneInit0",
            extends: None,
            description: Some("t-init of data lane0."),
            bit_size: 32,
            fields: &[Field {
                name: "t_d0_init",
                description: Some("initialization time of data lane."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 24,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "TLaneInit1",
            extends: None,
            description: Some("t-init of data lane1."),
            bit_size: 32,
            fields: &[Field {
                name: "t_d1_init",
                description: Some("initialization time of data lane."),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                bit_size: 24,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "TlpxCtrl",
            extends: None,
            description: Some("the time of tlpx_ctrl of all lane."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "tlpx",
                    description: Some("the width of tlpx."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 8,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "en_tlpx_check",
                    description: Some("enable the tlpx width check."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 8 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "UlpRxEn",
            extends: None,
            description: Some("enable lprx and ulprx."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "csi_clk_lprx_en",
                    description: Some("clock lane lp=rx receiver enable control."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_1_lprx_en",
                    description: Some("data lane1 lp-rx receiver enable control."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_clk_ulprx_en",
                    description: Some("clock lane ulp-rx receiver enable control."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 5 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_0_ulprx_en",
                    description: Some("data lane0 ulp-rx receiver enable control."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 6 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_1_ulprx_en",
                    description: Some("data lane1 ulp-rx receiver enable control."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 7 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "VoffcalOut",
            extends: None,
            description: Some("hs-rx dc-offset auto-calibration results."),
            bit_size: 32,
            fields: &[
                Field {
                    name: "csi_1_voffcal_out",
                    description: Some("data lane1 hs-rx dc-offset auto-calibration result."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 12 }),
                    bit_size: 5,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_1_voffcal_done",
                    description: Some("data lane1 hs-rx dc-offset auto-calibration done."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 17 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_o_voffcal_out",
                    description: Some("data lane0 hs-rx dc-offset auto-calibration result."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 18 }),
                    bit_size: 5,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_0_voffcal_done",
                    description: Some("data lane0 hs-rx dc-offset auto-calibration done."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 23 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_clk_voffcal_out",
                    description: Some("clock lane hs-rx dc-offset auto-calibration results."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 24 }),
                    bit_size: 5,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "csi_clk_voffcal_done",
                    description: Some("clock lane hs-rx dc-offset auto-calibration done."),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 29 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
    ],
    enums: &[],
};
